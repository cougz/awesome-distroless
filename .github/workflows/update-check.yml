name: Update Check

on:
  schedule:
    # Check for updates daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check PostgreSQL updates
        id: postgres-check
        run: |
          CURRENT_VERSION=$(grep "ARG VERSION=" postgres/Dockerfile | cut -d'=' -f2)
          LATEST_VERSION=$(curl -s https://api.github.com/repos/postgres/postgres/releases/latest | jq -r '.tag_name' | sed 's/REL_//' | sed 's/_/./g')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
          fi

      - name: Check Nginx updates
        id: nginx-check
        run: |
          CURRENT_VERSION=$(grep "ARG VERSION=" nginx/Dockerfile | cut -d'=' -f2)
          LATEST_VERSION=$(curl -s https://api.github.com/repos/nginx/nginx/releases/latest | jq -r '.tag_name' | sed 's/release-//')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
          fi

      - name: Check Redis updates
        id: redis-check
        run: |
          CURRENT_VERSION=$(grep "ARG VERSION=" redis/Dockerfile | cut -d'=' -f2)
          LATEST_VERSION=$(curl -s https://api.github.com/repos/redis/redis/releases/latest | jq -r '.tag_name')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
          fi

      - name: Create update summary
        run: |
          echo "## 🔄 Version Update Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Current | Latest | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PostgreSQL | ${{ steps.postgres-check.outputs.current }} | ${{ steps.postgres-check.outputs.latest }} | ${{ steps.postgres-check.outputs.update_available == 'true' && '⚠️ Update Available' || '✅ Up to Date' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Nginx | ${{ steps.nginx-check.outputs.current }} | ${{ steps.nginx-check.outputs.latest }} | ${{ steps.nginx-check.outputs.update_available == 'true' && '⚠️ Update Available' || '✅ Up to Date' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Redis | ${{ steps.redis-check.outputs.current }} | ${{ steps.redis-check.outputs.latest }} | ${{ steps.redis-check.outputs.update_available == 'true' && '⚠️ Update Available' || '✅ Up to Date' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Create issue for updates
        if: steps.postgres-check.outputs.update_available == 'true' || steps.nginx-check.outputs.update_available == 'true' || steps.redis-check.outputs.update_available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const updates = [];
            if ('${{ steps.postgres-check.outputs.update_available }}' === 'true') {
              updates.push(`PostgreSQL: ${{ steps.postgres-check.outputs.current }} → ${{ steps.postgres-check.outputs.latest }}`);
            }
            if ('${{ steps.nginx-check.outputs.update_available }}' === 'true') {
              updates.push(`Nginx: ${{ steps.nginx-check.outputs.current }} → ${{ steps.nginx-check.outputs.latest }}`);
            }
            if ('${{ steps.redis-check.outputs.update_available }}' === 'true') {
              updates.push(`Redis: ${{ steps.redis-check.outputs.current }} → ${{ steps.redis-check.outputs.latest }}`);
            }
            
            const title = `Update available for distroless images`;
            const body = `## Available Updates\n\n${updates.map(u => `- ${u}`).join('\n')}\n\n` +
                        `Please review and update the versions in the respective Dockerfiles.\n\n` +
                        `**Auto-generated by update-check workflow**`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['dependencies', 'automated']
            });
            
            const existingIssue = issues.data.find(issue => issue.title.includes('Update available'));
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'automated']
              });
            } else {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
            }